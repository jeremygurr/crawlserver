#!/bin/bash
# vim: et:ts=4:sw=4:syntax=sh

shopt -s expand_aliases
shopt -s extglob

# some simple aliases to make primitive exception mechanism work
# example:
#   f() {
#   return_value=0
#   while true; do
#       echo "first step"
#       for i in a b c; do
#           echo "Processing $i"
#           if [ $i == b ]; then
#               false || fail
#           else
#               true || fail
#           fi
#       done
#       maybe_break
#
#       echo "second step"
#       end_loop
#   done
#   return $return_value
#   }
unalias fail &>/dev/null
alias fail='{ return_value=1; break; }'
# used when the loop needs to be started over
unalias redo &>/dev/null
alias redo='{ return_value=2; break; }'
# should be placed after any loop inside of an exception catching block
unalias maybe_break &>/dev/null
alias maybe_break='[ $return_value == 1 ] && break; [ $return_value == 2 ] && { return_value=0; continue; };'
unalias end_loop &>/dev/null
alias end_loop='[ $return_value != 2 ] && break; [ $return_value == 2 ] && { return_value=0; continue; };'

nl=$"\n"

# can be overridden to support logging, etc.
unset err
err() { 
[ "$errors" ] && errors="$errors "
errors="${errors}$*"
}

# can be overridden to support logging, etc.
unset fatal
fatal() {
[ "$fatals" ] && fatals="$fatals "
fatals="${fatals}$*"
fatal_error=true
}

# this can be overridden to write to logfiles, etc.
unset show_errors
show_errors() {
if [ $return_value != 0 ]; then
    if [ "$fatals" ]; then
        outerr "$fatals"
        unset fatals
    fi
    if [ "$errors" ]; then
        outerr "$errors"
        unset errors
    fi
fi
}

# can be overridden to support logging, etc.
unset out
out() {
echo "$1"
}

unset outn
outn() {
echo -n "$1"
}

unset outerr
outerr() {
echo "$1" >&2
}

